{"version":3,"file":"filter-multi-select-bundle.js","sources":["../src/FilterMultiSelect.ts","../src/filter-multi-select.ts"],"names":["e","key","decrementItemFocus","_this","focusItem","this","documentClickListener","div","target","contains","closeDropdown","fmsFocusListener","viewBar","dispatchEvent","MouseEvent","fmsMousedownListener","stopPropagation","preventDefault","t","selectTarget","get","HTMLSelectElement","select","multiple","Error","name","filterInput","type","clearButton","document","createElement","append","forEach","o","dropDown","placeholder","selectedItems","allowEnablingAndDisabling","args","filterText","itemFocus","i","FilterMultiSelect","checkValue","value","label","SingleOption","fms","defaultSelected","disabled","htmlOptions","length","jsoptions","jsOptions","map","j","selected","v","getValue","counts","undefined","createSelectAllOption","class_2","_super","call","checkbox","indeterminate","prototype","markSelectAll","isDisabled","filter","options","className","items","disableNoPermissionCheck","m","addEventListener","stopImmediatePropagation","updateDropdownList","showing","isSelected","text","selectAllOption","hide","focusable","Array","caseSensitive","getLabel","toLowerCase","indexOf","show","refocusFilter","focus","classList","documentKeydownListener","removeEventListener","incrementItemFocus","isHidden","queueOption","option","children","getSelectedItemBadge","getAttribute","remove","areAllSelected","areOnlyDeselectedAlsoDisabled","markSelectAllNotDisabled","markSelectPartial","hidden","markDeselect","reduce","acc","cur","getOption","_i","_a","NULL_OPTION","deselect","enable","disable","isEnablingAndDisablingPermitted","add","row","toString","nchbx","id","checked","htmlFor","textContent","labelFor","innerHTML","closeButton","isClosed","tabIndex","selectNoDisabledCheck","update","selectedItemBadge","filterMultiSelect","$__default","extend","fn","placeholderText","selectAllText","initialize","getRootElement","replaceWith","methods","hasOption","selectOption","deselectOption","isOptionSelected","enableOption","disableOption","isOptionDisabled","selectAll","deselectAll","getSelectedOptionsAsJson","includeDisabled"],"mappings":"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","sourcesContent":["/*! \n *  Multiple select dropdown with filter jQuery plugin.\n *  Copyright (C) 2020  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\nimport $, { map } from 'jquery';\nimport Option from './Option';\n\nconst NULL_OPTION = new class implements Option {\n    public initialize(): void {}\n    public select(): void {}\n    public deselect(): void {}\n    public enable(): void {}\n    public disable(): void {}\n    public isSelected(): boolean {return false;}\n    public isDisabled(): boolean {return false;}\n    public getListItem(): HTMLElement {return document.createElement('div');}\n    public getSelectedItemBadge(): HTMLElement {return document.createElement('div');}\n    public getLabel(): string {return 'NULL_OPTION'}\n    public getValue(): string {return 'NULL_OPTION'}\n    public show(): void {}\n    public hide(): void {}\n    public isHidden(): boolean {return false;}\n    public focus(): void {}\n}  \n\nconst DEBUG = false;\n\nexport default class FilterMultiSelect {\n\n    private static SingleOption = class implements Option {\n        protected div: HTMLDivElement;\n        protected checkbox: HTMLInputElement;\n        protected labelFor: HTMLLabelElement;\n        protected closeButton: HTMLButtonElement;\n        protected selectedItemBadge: HTMLSpanElement;\n        protected fms: FilterMultiSelect;\n    \n        constructor(fms: FilterMultiSelect, row: number, name:string, label: string, value: string, checked: boolean, disabled: boolean) {\n            this.fms = fms;\n            this.div = document.createElement('div');\n            this.checkbox = document.createElement('input');\n            this.checkbox.type = 'checkbox';\n            let id: string = name + '-' + row.toString();\n            let nchbx: string = id + '-chbx';\n            this.checkbox.id = nchbx;\n            this.checkbox.name = name;\n            this.checkbox.value = value;\n            this.checkbox.checked = checked;\n            this.checkbox.disabled = disabled;\n            this.labelFor = document.createElement('label');\n            this.labelFor.htmlFor = nchbx;\n            this.labelFor.textContent = label;\n            this.div.append(this.checkbox, this.labelFor);\n            this.closeButton = document.createElement('button');\n            this.closeButton.type = 'button';\n            this.closeButton.innerHTML = '&times;';\n            this.selectedItemBadge = document.createElement('span');\n            this.selectedItemBadge.setAttribute('data-id',id);\n            this.selectedItemBadge.textContent = label;\n            this.selectedItemBadge.append(this.closeButton);\n        }\n    \n        private log(m: string, e: Event):void {\n            if (DEBUG) {\n                console.log(e.timeStamp + \" - \" + m + \":\" + e.type + \":\" + e.target)\n            }\n        }\n    \n        public initialize(): void {\n            this.div.className = 'dropdown-item custom-control';\n            this.checkbox.className = 'custom-control-input custom-checkbox';\n            this.labelFor.className = 'custom-control-label';\n            this.selectedItemBadge.className = 'item';\n            if (this.isSelected()) {\n                this.selectNoDisabledCheck();\n            }\n            if (this.isDisabled()) {\n                this.disableNoPermissionCheck();\n            }\n            this.checkbox.addEventListener('change', (e: Event) => {\n                e.stopPropagation();\n                if (this.isDisabled() || this.fms.isDisabled()) {\n                    e.preventDefault();\n                    return;\n                }\n                if (DEBUG) {\n                    this.log('checkbox',e);\n                }\n                \n                if (this.isSelected()) {\n                    this.select();\n                } else {\n                    this.deselect();\n                }\n                let numShown = this.fms.showing.length;\n                if (numShown === 1) {\n                    this.fms.clearFilterAndRefocus();\n                }\n            }, true);\n            this.checkbox.addEventListener('keyup', (e: KeyboardEvent) => {\n                if (DEBUG) {\n                    this.log('checkbox',e);\n                }\n                switch (e.key) {\n                    case \"Enter\":\n                        e.stopPropagation();\n                        this.checkbox.dispatchEvent(new MouseEvent('click'));\n                        break;\n                    default:\n                        break;\n                }\n            }, true)\n            this.closeButton.addEventListener('click', (e: Event) => {\n                e.stopPropagation();\n                if (this.isDisabled() || this.fms.isDisabled()) return;\n                if (DEBUG) {\n                    this.log('closeButton',e);\n                }\n                this.deselect();\n                if (!this.fms.isClosed()) {\n                    this.fms.refocusFilter();\n                }\n            }, true);\n            this.checkbox.tabIndex = -1;\n            this.closeButton.tabIndex = -1;\n        }\n    \n        public select(): void {\n            if (this.isDisabled()) return;\n            this.selectNoDisabledCheck();\n        }\n\n        private selectNoDisabledCheck(): void {\n            this.checkbox.checked = true;\n            this.fms.queueOption(this);\n            this.fms.update();\n        }\n    \n        public deselect(): void {\n            if (this.isDisabled()) return;\n            this.checkbox.checked = false;\n            this.fms.unqueueOption(this);\n            this.fms.update();\n        }\n    \n        public enable(): void {\n            if (!this.fms.isEnablingAndDisablingPermitted()) return;\n            this.checkbox.disabled = false;\n            this.selectedItemBadge.classList.remove('disabled');\n            this.fms.update();\n        }\n    \n        public disable(): void {\n            if (!this.fms.isEnablingAndDisablingPermitted()) return;\n            this.disableNoPermissionCheck();\n        }\n\n        private disableNoPermissionCheck(): void {\n            this.checkbox.disabled = true;\n            this.selectedItemBadge.classList.add('disabled');\n            this.fms.update();\n        }\n    \n        public isSelected(): boolean {\n            return this.checkbox.checked;\n        }\n    \n        public isDisabled(): boolean {\n            return this.checkbox.disabled;\n        }\n    \n        public getListItem(): HTMLElement {\n            return this.div;\n        }\n    \n        public getSelectedItemBadge(): HTMLElement {\n            return this.selectedItemBadge;\n        }\n    \n        public getLabel(): string {\n            return this.labelFor.textContent;\n        }\n    \n        public getValue(): string {\n            return this.checkbox.value;\n        }\n    \n        public show(): void {\n            this.div.hidden = false;\n        }\n    \n        public hide(): void {\n            this.div.hidden = true;\n        }\n    \n        public isHidden(): boolean {\n            return this.div.hidden;\n        }\n\n        public focus(): void {\n            this.labelFor.focus();\n        }\n    }\n\n    private static createOptions(fms: FilterMultiSelect, name: string, htmlOptions: Array<HTMLOptionElement>, jsOptions: Array<[label:string, value:string, selected?:boolean, disabled?:boolean]>): Array<Option> {\n        let htmloptions =  htmlOptions.map((o, i) => {\n            FilterMultiSelect.checkValue(o.value, o.label);\n            return new FilterMultiSelect.SingleOption(fms, i, name, o.label, o.value, o.defaultSelected, o.disabled);\n        });\n        let j = htmlOptions.length;\n        let jsoptions = jsOptions.map((o, i) => {\n            let label: string = o[0];\n            let value: string = o[1];\n            let selected: boolean = o[2];\n            let disabled: boolean = o[3];\n            FilterMultiSelect.checkValue(value, label);\n            return new FilterMultiSelect.SingleOption(fms, j+i, name, label, value, selected, disabled);\n\n        });\n        let opts = htmloptions.concat(jsoptions);\n        let counts: any = {};\n        opts.forEach((o) => {\n            let v: string = o.getValue();\n            if (counts[v] === undefined) {\n                counts[v] = 1;\n            } else {\n                throw new Error(\"Duplicate value: \" + o.getValue() + \" (\" + o.getLabel() + \")\");\n            }\n        });\n        return opts;\n    }\n\n    private static checkValue(value:string, label:string):void {\n        if (value === \"\") {\n            throw new Error(\"Option \" + label + \" does not have an associated value.\");\n        }\n    }\n\n    private static createSelectAllOption(fms: FilterMultiSelect, name: string, label: string) {\n        return new class extends FilterMultiSelect.SingleOption {\n            constructor() {\n                super(fms,-1,name,label,'',false,false); //magic number\n                this.checkbox.indeterminate = false;\n            }\n\n            markSelectAll(): void {\n                this.checkbox.checked = true;\n                this.checkbox.indeterminate = false;\n            }\n\n            markSelectPartial(): void {\n                this.checkbox.checked = false;\n                this.checkbox.indeterminate = true;\n            }\n\n            markSelectAllNotDisabled(): void {\n                this.checkbox.checked = true;\n                this.checkbox.indeterminate = true;\n            }\n\n            markDeselect(): void {\n                this.checkbox.checked = false;\n                this.checkbox.indeterminate = false;\n            }\n\n            public select(): void {\n                if (this.isDisabled()) return;\n                this.fms.options.filter((o) => !o.isSelected())\n                    .forEach((o) => o.select());\n            }\n        \n            public deselect(): void {\n                if (this.isDisabled()) return;\n                this.fms.options.filter((o) => o.isSelected())\n                    .forEach((o) => o.deselect());\n            }\n\n            public enable(): void {\n                this.checkbox.disabled = false;\n            }\n        \n            public disable(): void {\n                this.checkbox.disabled = true;\n            }\n        } ();\n    }\n\n    private options: Array<Option>;\n    private selectAllOption;\n    private div: HTMLDivElement;\n    private viewBar: HTMLDivElement;\n    private placeholder: HTMLSpanElement;\n    private selectedItems: HTMLSpanElement;\n    private dropDown: HTMLDivElement;\n    private filter: HTMLDivElement;\n    private filterInput: HTMLInputElement;\n    private clearButton: HTMLButtonElement;\n    private items: HTMLDivElement;\n    private caseSensitive: boolean;\n    private disabled: boolean;\n    private allowEnablingAndDisabling: boolean;\n    private filterText: string;\n    private showing: Array<number>;\n    private focusable: Array<number>;\n    private itemFocus: number;\n    private name: string;\n\n    constructor (selectTarget: JQuery<HTMLElement>, args: Args) {\n        let t = selectTarget.get(0);\n        if (!(t instanceof HTMLSelectElement)) {\n            throw new Error(\"JQuery target must be a select element.\");\n        }\n        let select: HTMLSelectElement = t;\n        let multiple: boolean = select.multiple;\n        if (!multiple) {\n            throw new Error(\"Select element must have the \\\"multiple\\\" attribute.\")\n        }\n        let name: string = select.name;\n        if (!name) {\n            throw new Error(\"Select element must have a name attribute.\");\n        }\n        this.name = name;\n        let array: Array<HTMLOptionElement> = selectTarget.find('option').toArray();\n        this.options = FilterMultiSelect.createOptions(this, name, array, args.items);\n        this.selectAllOption = FilterMultiSelect.createSelectAllOption(this, name, args.selectAllText);\n\n        // filter box\n        this.filterInput = document.createElement('input');\n        this.filterInput.type = 'text';\n        this.filterInput.placeholder = args.filterText;\n        this.clearButton = document.createElement('button');\n        this.clearButton.type = 'button';\n        this.clearButton.innerHTML = '&times;';\n        this.filter = document.createElement('div');\n        this.filter.append(this.filterInput, this.clearButton);\n        \n        // items\n        this.items = document.createElement('div');\n        this.items.append(this.selectAllOption.getListItem());\n        this.options.forEach((o: Option) => this.items.append(o.getListItem()));\n\n        // dropdown list\n        this.dropDown = document.createElement('div');\n        this.dropDown.append(this.filter, this.items);\n\n        // placeholder\n        this.placeholder = document.createElement('span');\n        this.placeholder.textContent = args.placeholderText;\n        this.selectedItems = document.createElement('span');\n        \n        // viewbar\n        this.viewBar = document.createElement('div');\n        this.viewBar.append(this.placeholder, this.selectedItems);\n\n        this.div = document.createElement('div');\n        this.div.id = select.id;\n        this.div.append(this.viewBar, this.dropDown);\n\n        this.caseSensitive = args.caseSensitive;\n        this.disabled = select.disabled;\n        this.allowEnablingAndDisabling = args.allowEnablingAndDisabling;\n        this.filterText = '';\n        this.showing = new Array<number>();\n        this.focusable = new Array<number>();\n        this.itemFocus = -2; //magic number\n    }\n\n    public initialize(): void {\n        this.options.forEach(o => o.initialize());\n        this.selectAllOption.initialize();\n        \n        this.filterInput.className = 'form-control';\n        this.clearButton.tabIndex = -1;\n\n        this.filter.className = 'filter dropdown-item'\n        this.items.className = 'items dropdown-item';\n        this.dropDown.className = 'dropdown-menu';\n\n        this.placeholder.className = 'placeholder';\n        this.selectedItems.className = 'selected-items';\n        this.viewBar.className = 'viewbar form-control dropdown-toggle';\n\n        this.div.className = 'filter-multi-select dropdown';\n\n        if (this.isDisabled()) {\n            this.disableNoPermissionCheck();\n        }\n\n        this.attachDropdownListeners();\n        this.attachViewbarListeners();\n        this.closeDropdown();\n    }\n\n    private log(m: string, e: Event):void {\n        if (DEBUG) {\n            console.log(e.timeStamp + \" - \" + m + \":\" + e.type + \":\" + e.target);\n        }\n    }\n\n    private attachDropdownListeners(): void {\n        this.filterInput.addEventListener('keyup',(e: KeyboardEvent) => {\n            if (DEBUG) {\n                this.log('filterInput',e);\n            }\n            e.stopImmediatePropagation();\n            this.updateDropdownList();\n            let numShown = this.showing.length;\n            switch(e.key) {\n                case \"Enter\":\n                    if (numShown === 1) {\n                        let o: Option = this.options[this.showing[0]]; //magic number\n                        if (!o.isDisabled()) {\n                            if (o.isSelected()) {\n                                o.deselect();\n                            } else {\n                                o.select();\n                            }\n                            this.clearFilterAndRefocus();\n                        }\n                    }\n                    break;\n                case \"Escape\":\n                    if (this.filterText.length > 0) {\n                        this.clearFilterAndRefocus();\n                    } else {\n                        this.closeDropdown();\n                    }\n                    break;\n                default:\n                    break;\n            }   \n        }, true);\n        this.clearButton.addEventListener('click', (e: MouseEvent) => {\n            if (DEBUG) {\n                this.log('clearButton',e);\n            }\n            e.stopImmediatePropagation();\n            let text = this.filterInput.value;\n            if (text.length > 0) {\n                this.clearFilterAndRefocus();\n            } else {\n                this.closeDropdown();\n            }\n        }, true);\n    }\n\n    private updateDropdownList(): void {\n        let text = this.filterInput.value;\n        if (text.length > 0) {\n            this.selectAllOption.hide();\n        } else {\n            this.selectAllOption.show();\n        }\n        let showing = new Array<number>();\n        let focusable = new Array<number>();\n        if (this.caseSensitive) {\n            this.options.forEach((o: Option, i: number) => {\n                if (o.getLabel().indexOf(text) !== -1) { //magic number\n                    o.show();\n                    showing.push(i);\n                    if (!o.isDisabled()) {\n                        focusable.push(i);\n                    }\n                } else {\n                    o.hide();\n                }\n            });\n        } else {\n            this.options.forEach((o: Option, i: number) => {\n                if (o.getLabel().toLowerCase().indexOf(text.toLowerCase()) !== -1 ) { //magic number \n                    o.show();\n                    showing.push(i);\n                    if (!o.isDisabled()) {\n                        focusable.push(i);\n                    }\n                } else {\n                    o.hide();\n                }\n            });\n        }\n        this.filterText = text;\n        this.showing = showing;\n        this.focusable = focusable;\n    }\n\n    private clearFilterAndRefocus(): void {\n        if (DEBUG) {\n            console.log('clear filter');\n        }\n        this.filterInput.value = '';\n        this.updateDropdownList();\n        this.refocusFilter();\n    }\n\n    private refocusFilter() {\n        if (DEBUG) {\n            console.log('refocus filter');\n        }\n        this.filterInput.focus();\n        this.itemFocus = -2; //magic number\n    }\n\n    private attachViewbarListeners(): void {\n        this.viewBar.addEventListener('click',(e) => {\n            if (DEBUG) {\n                this.log('viewBar',e);\n            }\n            if (this.isClosed()) {\n                this.openDropdown();\n            } else {\n                this.closeDropdown();\n            }\n        });\n    }\n\n    public isClosed(): boolean {\n        return !this.dropDown.classList.contains('show');\n    }\n\n    private setTabIndex(): void {\n        if (this.isDisabled()) {\n            this.div.tabIndex = -1;\n        } else {\n            if (this.isClosed()) {\n                this.div.tabIndex = 0;\n            } else {\n                this.div.tabIndex = -1;\n            }\n        }\n    }\n\n    private closeDropdown(): void {\n        if (DEBUG) {\n            console.log('close');\n        }\n        document.removeEventListener('keydown', this.documentKeydownListener, true);\n        document.removeEventListener('click', this.documentClickListener, true);\n        this.dropDown.classList.remove('show');\n        setTimeout(() => {\n            this.setTabIndex();    \n        }, 100); //magic number\n        this.div.addEventListener('mousedown', this.fmsMousedownListener, true);\n        this.div.addEventListener('focus', this.fmsFocusListener);\n    }\n\n    private documentKeydownListener = (e: KeyboardEvent) => {\n        if (DEBUG) {\n            this.log('document',e);\n            console.log(e.key);\n        }\n        switch(e.key) {\n            case \"Tab\":\n                e.stopPropagation();\n                this.closeDropdown();\n                break;\n            case \"ArrowUp\":\n                e.stopPropagation();\n                e.preventDefault();\n                if (DEBUG) {\n                    console.log(\"up\");\n                }\n                this.decrementItemFocus();\n                this.focusItem();\n                break;\n            case \"ArrowDown\":\n                e.stopPropagation();\n                e.preventDefault();\n                if (DEBUG) {\n                    console.log(\"down\");\n                }\n                this.incrementItemFocus();\n                this.focusItem();\n                break;\n            case \"Enter\":\n            case \"Spacebar\":\n            case \" \":\n                //swallow to allow checkbox change to work\n                break;\n            default:\n                //send key to filter\n                this.refocusFilter();\n                break;\n        }\n    };\n\n    private incrementItemFocus(): void {\n        if (this.itemFocus >= this.focusable.length - 1 || this.focusable.length == 0) return;\n        this.itemFocus++;\n        if (this.itemFocus == -1 && this.selectAllOption.isHidden()) { //magic number\n            this.itemFocus++;\n        }\n    }\n\n    private decrementItemFocus(): void {\n        if (this.itemFocus <= -2) return; //magic number\n        this.itemFocus--;\n        if (this.itemFocus == -1 && this.selectAllOption.isHidden()) { //magic number\n            this.itemFocus--;\n        }\n    }\n\n    private focusItem(): void {\n        if (this.itemFocus === -2) {\n            this.refocusFilter();\n        } else if (this.itemFocus === -1) {\n            this.selectAllOption.focus();\n        } else {\n            this.options[this.focusable[this.itemFocus]].focus();\n        }\n    }\n\n    private documentClickListener = (e: MouseEvent) => {\n        if (DEBUG) {\n            this.log('document',e);\n        }\n        if (this.div !== e.target && !this.div.contains(<Node>e.target)) {\n            this.closeDropdown();\n        }\n    };\n\n    private fmsFocusListener: EventListener = (e: FocusEvent) => {\n        if (DEBUG) {\n            this.log('div',e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.viewBar.dispatchEvent(new MouseEvent('click'));\n    };\n\n    private fmsMousedownListener: EventListener = (e: MouseEvent) => {\n        if (DEBUG) {\n            this.log('div',e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    private openDropdown() {\n        if (this.disabled) return;\n        if (DEBUG) {\n            console.log('open');\n        }\n        this.div.removeEventListener('mousedown', this.fmsMousedownListener, true);\n        this.div.removeEventListener('focus', this.fmsFocusListener);\n        this.dropDown.classList.add('show');\n        this.setTabIndex();\n        this.clearFilterAndRefocus();\n        document.addEventListener('keydown', this.documentKeydownListener, true);\n        document.addEventListener('click', this.documentClickListener, true);\n    }\n\n    private queueOption(option: Option): void {\n        if (this.options.indexOf(option) == -1) return;\n        $(this.selectedItems).append(option.getSelectedItemBadge());\n    }\n\n    private unqueueOption(option: Option): void {\n        if (this.options.indexOf(option) == -1) return;\n        $(this.selectedItems).children('[data-id=\"' + option.getSelectedItemBadge().getAttribute('data-id') + '\"]').remove();\n    }\n\n    private update(): void {\n        if (this.areAllSelected()) {\n            this.selectAllOption.markSelectAll();\n            this.placeholder.hidden = true;\n        } else if (this.areSomeSelected()) {\n            if (this.areOnlyDeselectedAlsoDisabled()) {\n                this.selectAllOption.markSelectAllNotDisabled();\n                this.placeholder.hidden = true;\n            } else {\n                this.selectAllOption.markSelectPartial();\n                this.placeholder.hidden = true;\n            }\n        } else {\n            this.selectAllOption.markDeselect();\n            this.placeholder.hidden = false;\n        }\n        if (this.areAllDisabled()) {\n            this.selectAllOption.disable();\n        } else {\n            this.selectAllOption.enable();\n        }\n    }\n\n    private areAllSelected(): boolean {\n        return this.options\n                .map((o) => o.isSelected())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private areSomeSelected(): boolean {\n        return this.options\n                .map((o) => o.isSelected())\n                .reduce((acc,cur) => acc || cur, false);\n    }\n\n    private areOnlyDeselectedAlsoDisabled(): boolean {\n        return this.options\n                .filter((o) => !o.isSelected())\n                .map((o) => o.isDisabled())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private areAllDisabled(): boolean {\n        return this.options\n                .map((o) => o.isDisabled())\n                .reduce((acc,cur) => acc && cur, true);\n    }\n\n    private isEnablingAndDisablingPermitted(): boolean {\n        return this.allowEnablingAndDisabling;\n    }\n\n    public getRootElement(): HTMLElement {\n        return this.div;\n    }\n\n    public hasOption(value: string): boolean {\n        return this.getOption(value) !== NULL_OPTION;\n    }\n\n    private getOption(value: string): Option {\n        for (const o of this.options) {\n            if (o.getValue() == value) {\n                return o;\n            }\n        }\n        return NULL_OPTION;\n    }\n\n    public selectOption(value: string): void {\n        this.getOption(value).select();\n    }\n\n    public deselectOption(value: string): void {\n        this.getOption(value).deselect();\n    }\n\n    public isOptionSelected(value: string): boolean {\n        return this.getOption(value).isSelected();\n    }\n\n    public enableOption(value: string): void {\n        this.getOption(value).enable();\n    }\n\n    public disableOption(value: string): void {\n        this.getOption(value).disable();\n    }\n\n    public isOptionDisabled(value: string): boolean {\n        return this.getOption(value).isDisabled();\n    }\n\n    public disable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.disableNoPermissionCheck();\n    }\n\n    private disableNoPermissionCheck(): void {\n        this.options.forEach((o) => this.setBadgeDisabled(o));\n        this.disabled = true;\n        this.div.classList.add('disabled');\n        this.viewBar.classList.remove('dropdown-toggle');\n        this.closeDropdown();\n    }\n\n    private setBadgeDisabled(o: Option):void {\n        o.getSelectedItemBadge().classList.add('disabled');\n    }\n\n    public enable(): void {\n        if (!this.isEnablingAndDisablingPermitted()) return;\n        this.options.forEach((o) => {\n            if (!o.isDisabled()) {\n                this.setBadgeEnabled(o);\n            }\n        });\n        this.disabled = false;\n        this.div.classList.remove('disabled');\n        this.setTabIndex(); \n        this.viewBar.classList.add('dropdown-toggle');\n    }\n\n    private setBadgeEnabled(o: Option):void {\n        o.getSelectedItemBadge().classList.remove('disabled');\n    }\n\n    public isDisabled(): boolean {\n        return this.disabled;\n    }\n\n    public selectAll(): void {\n        this.selectAllOption.select();\n    }\n\n    public deselectAll(): void {\n        this.selectAllOption.deselect();\n    }\n\n    private getSelectedOptions(includeDisabled = true): Array<Option> {\n        let a = this.options;\n        if (!includeDisabled) {\n            if (this.isDisabled()) {\n                return new Array();\n            }\n            a = a.filter((o) => !o.isDisabled());\n        }\n        a = a.filter((o) => o.isSelected());\n        return a;\n    }\n\n    public getSelectedOptionsAsJson(includeDisabled = true): string {\n        const data: any = {};\n        let a: Array<string> = this.getSelectedOptions(includeDisabled).map((o) => o.getValue());\n        data[this.getName()] = a;\n        let c = JSON.stringify(data, null, \"  \");\n        if (DEBUG) {\n            console.log(c);\n        }\n        return c;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n}","/*! \n *  Multiple select dropdown with filter jQuery plugin.\n *  Copyright (C) 2020  Andrew Wagner  github.com/andreww1011\n *\n *  This library is free software; you can redistribute it and/or\n *  modify it under the terms of the GNU Lesser General Public\n *  License as published by the Free Software Foundation; either\n *  version 2.1 of the License, or (at your option) any later version.\n * \n *  This library is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n *  Lesser General Public License for more details.\n * \n *  You should have received a copy of the GNU Lesser General Public\n *  License along with this library; if not, write to the Free Software\n *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301\n *  USA\n */\nimport $ from 'jquery';\nimport FilterMultiSelect from './FilterMultiSelect';\n\n// define the plugin function on the jQuery extension point.\n($.fn as any).filterMultiSelect = function (this: JQuery, args: Args): any {\n    let target = this;\n    // merge the global options with the per-call options.\n    args = $.extend({}, ($.fn as any).filterMultiSelect.args, args);\n\n    // factory defaults\n    if (typeof args.placeholderText === 'undefined') args.placeholderText = 'nothing selected';\n    if (typeof args.filterText === 'undefined') args.filterText = 'Filter';\n    if (typeof args.selectAllText === 'undefined') args.selectAllText = 'Select All';\n    if (typeof args.caseSensitive === 'undefined') args.caseSensitive = false;\n    if (typeof args.allowEnablingAndDisabling === 'undefined') args.allowEnablingAndDisabling = true;\n    if (typeof args.items === 'undefined') args.items = new Array();\n\n    let filterMultiSelect = new FilterMultiSelect(target, args);\n    filterMultiSelect.initialize();\n  \n    const fms = $(filterMultiSelect.getRootElement());\n    target.replaceWith(fms);\n    \n    var methods = {\n        hasOption: function(value: string):boolean {\n            return filterMultiSelect.hasOption(value);\n        },\n        selectOption: function(value: string):void {\n            filterMultiSelect.selectOption(value);\n        },\n        deselectOption: function(value: string):void {\n            filterMultiSelect.deselectOption(value);\n        },\n        isOptionSelected: function(value: string):boolean {\n            return filterMultiSelect.isOptionSelected(value);\n        },\n        enableOption: function(value: string):void {\n            filterMultiSelect.enableOption(value);\n        },\n        disableOption: function(value: string):void {\n            filterMultiSelect.disableOption(value);\n        },\n        isOptionDisabled: function(value: string):boolean {\n            return filterMultiSelect.isOptionDisabled(value);\n        },\n        enable: function():void {\n            filterMultiSelect.enable();\n        },\n        disable: function():void {\n            filterMultiSelect.disable();\n        },\n        selectAll: function():void {\n            filterMultiSelect.selectAll();\n        },\n        deselectAll: function():void {\n            filterMultiSelect.deselectAll();\n        },\n        getSelectedOptionsAsJson: function(includeDisabled = true):string {\n            return filterMultiSelect.getSelectedOptionsAsJson(includeDisabled);\n        }\n    };\n    return methods;\n};\n\n// define the plugin's global default options.\n($.fn as any).filterMultiSelect.args = {};"]}